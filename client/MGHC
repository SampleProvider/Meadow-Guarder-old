javascript:
var hackedDiv = document.createElement('div');
document.getElementById('gameDiv').appendChild(hackedDiv);
hackedDiv.style.top = '90px';
hackedDiv.style.backgroundColor = 'rgba(0,0,0,0);';

var hackedCollumn1 = document.createElement('div');
hackedCollumn1.className = 'UI-display-light';
hackedDiv.appendChild(hackedCollumn1);
hackedCollumn1.style.top = '90px';
hackedCollumn1.style.backgroundColor = 'rgb(0,0,0,125);';
hackedCollumn1.style.opacity = 0.6;

var hackedCollumn2 = document.createElement('div');
hackedCollumn2.className = 'UI-display-light';
hackedDiv.appendChild(hackedCollumn2);
hackedCollumn2.style.top = '130px';
hackedCollumn2.style.backgroundColor = 'rgb(0,0,0,125);';
hackedCollumn2.style.opacity = 0.6;

var monsterTracers = document.createElement('button');
monsterTracers.className = 'UI-button-light';
monsterTracers.style.position = 'static';
monsterTracers.style.top = '8px';
monsterTracers.innerHTML = 'Monster Tracers';
hackedCollumn1.appendChild(monsterTracers);

monsterTracers.style.color = '#ffffff';
monsterTracers.style.backgroundColor = '#000000';

var monsterTracersState = false;
monsterTracers.onclick = function(){
    monsterTracersState = !monsterTracersState;
    if(monsterTracersState){
        monsterTracers.style.color = '#000000';
        monsterTracers.style.backgroundColor = '#ffffff';
    }
    else{
        monsterTracers.style.color = '#ffffff';
        monsterTracers.style.backgroundColor = '#000000';
    }
};

var attackMonsters = document.createElement('button');
attackMonsters.className = 'UI-button-light';
attackMonsters.style.position = 'static';
attackMonsters.style.top = '8px';
attackMonsters.innerHTML = 'Attack Monsters';
hackedCollumn1.appendChild(attackMonsters);

attackMonsters.style.color = '#ffffff';
attackMonsters.style.backgroundColor = '#000000';

var attackMonstersState = false;
attackMonsters.onclick = function(){
    attackMonstersState = !attackMonstersState;
    if(attackMonstersState){
        attackMonsters.style.color = '#000000';
        attackMonsters.style.backgroundColor = '#ffffff';
    }
    else{
        attackMonsters.style.color = '#ffffff';
        attackMonsters.style.backgroundColor = '#000000';
    }
};

var playerTracers = document.createElement('button');
playerTracers.className = 'UI-button-light';
playerTracers.style.position = 'static';
playerTracers.style.top = '8px';
playerTracers.innerHTML = 'Player Tracers';
hackedCollumn2.appendChild(playerTracers);

playerTracers.style.color = '#ffffff';
playerTracers.style.backgroundColor = '#000000';

var playerTracersState = false;
playerTracers.onclick = function(){
    playerTracersState = !playerTracersState;
    if(playerTracersState){
        playerTracers.style.color = '#000000';
        playerTracers.style.backgroundColor = '#ffffff';
    }
    else{
        playerTracers.style.color = '#ffffff';
        playerTracers.style.backgroundColor = '#000000';
    }
};

var attackPlayers = document.createElement('button');
attackPlayers.className = 'UI-button-light';
attackPlayers.style.position = 'static';
attackPlayers.style.top = '8px';
attackPlayers.innerHTML = 'Attack Players';
hackedCollumn2.appendChild(attackPlayers);

attackPlayers.style.color = '#ffffff';
attackPlayers.style.backgroundColor = '#000000';

var attackPlayersState = false;
attackPlayers.onclick = function(){
    attackPlayersState = !attackPlayersState;
    if(attackPlayersState){
        attackPlayers.style.color = '#000000';
        attackPlayers.style.backgroundColor = '#ffffff';
    }
    else{
        attackPlayers.style.color = '#ffffff';
        attackPlayers.style.backgroundColor = '#000000';
    }
};

var autoRespawn = document.createElement('button');
autoRespawn.className = 'UI-button-light';
autoRespawn.style.position = 'static';
autoRespawn.style.top = '8px';
autoRespawn.innerHTML = 'Auto Respawn';
hackedCollumn2.appendChild(autoRespawn);

autoRespawn.style.color = '#ffffff';
autoRespawn.style.backgroundColor = '#000000';

var autoRespawnState = false;
var autoRespawning = false;
autoRespawn.onclick = function(){
    autoRespawnState = !autoRespawnState;
    if(autoRespawnState){
        autoRespawn.style.color = '#000000';
        autoRespawn.style.backgroundColor = '#ffffff';
    }
    else{
        autoRespawn.style.color = '#ffffff';
        autoRespawn.style.backgroundColor = '#000000';
    }
};

var getDistance = function(pt1,pt2){
    return (pt1.x - pt2.x)*(pt1.x - pt2.x) + (pt1.y - pt2.y)*(pt1.y - pt2.y);
};

MGHC = function(){
    if(monsterTracersState){
        cameraX = WIDTH / 2 - Player.list[selfId].x;
        cameraY = HEIGHT / 2 - Player.list[selfId].y;
        if(Player.list[selfId].mapWidth > window.innerWidth){
            if(cameraX > 0){
                cameraX = 0;
            }
            if(cameraX < WIDTH - Player.list[selfId].mapWidth){
                cameraX = WIDTH - Player.list[selfId].mapWidth;
            }
        }
        if(Player.list[selfId].mapHeight > window.innerHeight){
            if(cameraY > 0){
                cameraY = 0;
            }
            if(cameraY < HEIGHT - Player.list[selfId].mapHeight){
                cameraY = HEIGHT - Player.list[selfId].mapHeight;
            }
        }
        ctx1.save();
        ctx1.translate(cameraX,cameraY);
        for(var i in Monster.list){
            if(Monster.list[i].monsterType === 'blueBird'){
                ctx1.strokeStyle = '#0000ff';
                ctx1.lineWidth = 2;
            }
            if(Monster.list[i].monsterType === 'greenBird'){
                ctx1.strokeStyle = '#00dd00';
                ctx1.lineWidth = 2;
            }
            if(Monster.list[i].monsterType === 'blueBall'){
                ctx1.strokeStyle = '#9999ff';
                ctx1.lineWidth = 4;
            }
            if(Monster.list[i].monsterType === 'snowBall'){
                ctx1.strokeStyle = '#eeeeee';
                ctx1.lineWidth = 4;
            }
            if(Monster.list[i].monsterType === 'redCherryBomb'){
                ctx1.strokeStyle = '#ff0000';
                ctx1.lineWidth = 6;
            }
            if(Monster.list[i].monsterType === 'blueCherryBomb'){
                ctx1.strokeStyle = '#0000ff';
                ctx1.lineWidth = 6;
            }
            ctx1.beginPath();
            ctx1.moveTo(Player.list[selfId].x,Player.list[selfId].y);
            ctx1.lineTo(Monster.list[i].x,Monster.list[i].y);
            ctx1.stroke();
        }
        ctx1.restore();
    }
    if(playerTracersState){
        cameraX = WIDTH / 2 - Player.list[selfId].x;
        cameraY = HEIGHT / 2 - Player.list[selfId].y;
        if(Player.list[selfId].mapWidth > window.innerWidth){
            if(cameraX > 0){
                cameraX = 0;
            }
            if(cameraX < WIDTH - Player.list[selfId].mapWidth){
                cameraX = WIDTH - Player.list[selfId].mapWidth;
            }
        }
        if(Player.list[selfId].mapHeight > window.innerHeight){
            if(cameraY > 0){
                cameraY = 0;
            }
            if(cameraY < HEIGHT - Player.list[selfId].mapHeight){
                cameraY = HEIGHT - Player.list[selfId].mapHeight;
            }
        }
        ctx1.save();
        ctx1.translate(cameraX,cameraY);
        for(var i in Player.list){
            ctx1.strokeStyle = '#ff9000';
            ctx1.lineWidth = 8;
            ctx1.beginPath();
            ctx1.moveTo(Player.list[selfId].x,Player.list[selfId].y);
            ctx1.lineTo(Player.list[i].x,Player.list[i].y);
            ctx1.stroke();
        }
        ctx1.restore();
    }
    if(attackMonstersState){
        if(Monster.list === {}){
            return;
        };
        var closestMonster = undefined;
        for(var i in Monster.list){
            if(closestMonster === undefined){
                closestMonster = Monster.list[i];
            }
            else if(getDistance(Player.list[selfId],closestMonster) > getDistance(Player.list[selfId],Monster.list[i])){
                closestMonster = Monster.list[i];
            }
        }
        socket.emit('keyPress',{inputId:'attack',state:true});
        socket.emit('keyPress',{inputId:'direction',state:{x:closestMonster.x - Player.list[selfId].x,y:closestMonster.y - Player.list[selfId].y}});
    }
    if(attackPlayersState){
        var numPlayers = 0;
        for(var i in Player.list){
            numPlayers += 1;
        }
        if(numPlayers === 1){
            return;
        };
        var closestPlayer = undefined;
        for(var i in Player.list){
            if(closestPlayer === undefined){
                closestPlayer = Player.list[i];
            }
            else if(getDistance(Player.list[selfId],closestPlayer) > getDistance(Player.list[selfId],Player.list[i])){
                closestPlayer = Player.list[i];
            }
        }
        socket.emit('keyPress',{inputId:'attack',state:true});
        socket.emit('keyPress',{inputId:'direction',state:{x:closestPlayer.x - Player.list[selfId].x,y:closestPlayer.y - Player.list[selfId].y}});
    }
    if(autoRespawnState && Player.list[selfId].hp < 1 && !autoRespawning){
        autoRespawning = true;
        setTimeout(function(){
            socket.emit('respawn');
            gameDiv.style.display = 'inline-block';
            disconnectedDiv.style.display = 'none';
            spectatorDiv.style.display = 'none';
            pageDiv.style.display = 'none';
            respawnTimer = 0;
            setTimeout(function(){
                autoRespawning = false;
            },1000);
        },1000);
    }
}